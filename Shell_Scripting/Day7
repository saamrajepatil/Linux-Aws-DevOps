
üóìÔ∏è Day 1: Shell Scripting Basics

 
1. What is Shell Scripting?
 
A script written for the shell (Bash, Zsh, etc.) to automate tasks.
 
Used to automate DevOps workflows (CI/CD, backups, deployments).
 
 
 
2. Shebang (#!)
 
#!/bin/bash
 
Tells the OS to use Bash to interpret the script.
 
 
 
3. How to Create and Run a Script
 
Create:
 
nano hello.sh
 
Sample Script:
 
#!/bin/bash
echo "Hello, DevOps students!"
 
Run:
 
chmod +x hello.sh
./hello.sh
 
 
 
4. Variables
 
name="Sam"
echo "Welcome, $name"
 
 
5. User Input
 
read -p "Enter your name: " name
echo "Hello, $name"
 
 
6. Comments
 
# This is a comment
 
 
7. Exit Status
 
echo $?
 
______
 
 
üîç 1. Use -x Option (Trace Execution)
 
üîπ Run Script with -x:
 
bash -x script.sh
 
This prints each command before executing it.
 
üîπ Example:
 
#!/bin/bash
a=5
b=10
c=$((a + b))
echo "Sum is: $c"
 
Run:
 
bash -x script.sh
 
Output:
 
+ a=5
+ b=10
+ c=15
+ echo 'Sum is: 15'
Sum is: 15
 
 
---
 
üõ† 2. Add set -x or set -v in Script
 
set -x ‚Äì Prints each command with its expanded arguments (good for debugging)
 
set -v ‚Äì Prints each line of the script before execution (good for seeing flow)
 
 
üîπ Example:
 
#!/bin/bash
set -x  # Enable debugging
 
name="Sam"
echo "Hello, $name"
 
set +x  # Disable debugging
 
 
---
 
üßµ 3. Use echo and printf Statements
 
Add print statements to verify values and flow.
 
üîπ Example:
 
#!/bin/bash
filename="file.txt"
 
if [ -f "$filename" ]; then
  echo "$filename exists."
else
  echo "$filename not found!"
fi
 
 
---
 
‚ö†Ô∏è 4. Check Exit Status Using $?
 
Returns the status of the last executed command.
 
üîπ Example:
 
#!/bin/bash
cp file.txt /tmp/
if [ $? -eq 0 ]; then
  echo "Copy successful"
else
  echo "Copy failed"
fi
 
 
---
 
üö´ 5. Use trap to Catch Errors or Interrupts
 
üîπ Example:
 
#!/bin/bash
trap 'echo "Something went wrong! Line: $LINENO"' ERR
 
cp file1.txt /tmp/
 
 
---
 
üß∞ 6. Use shellcheck for Static Analysis
 
Install on Amazon Linux:
 
 
sudo yum install -y epel-release
sudo yum install -y ShellCheck
 
Run:
 
 
shellcheck script.sh
 
 
---
 
‚úÖ Summary of Debugging Options
 
Command/Tool Purpose
 
bash -x Trace script execution
set -x / set +x Enable/disable debug mode inside script
echo, printf Print variable values
$? Check last command status
trap Catch and handle errors
shellcheck Linting and static analysis

_______________________________________________________________________________________________________________________________________________________________________________

Script to Take User Name and Print Greeting
This script prompts the user to enter their name and then prints a personalized greeting.

#!/bin/bash

# Prompt the user to enter their name
echo "Please enter your name:"

# Read the user's input into the variable 'name'
read name

# Print a greeting message using the user's name
echo "Hello, $name! Welcome!"

##Script to Check if a File Exists
This script checks whether a specified file exists in the current directory and provides feedback accordingly.

#!/bin/bash

# Prompt the user to enter the file name
echo "Please enter the file name to check:"

# Read the user's input into the variable 'filename'
read filename

# Check if the file exists
if [ -e "$filename" ]; then
    # If the file exists, print a confirmation message
    echo "The file '$filename' exists."
else
    # If the file does not exist, print an error message
    echo "The file '$filename' does not exist."
fi

Explanation
User Input: Both scripts use read to capture user input.
Conditional Logic: The second script uses an if statement with the -e flag to check for file existence.
Output: Each script provides clear output based on user interaction.
These scripts can be executed in a Unix-like environment by saving them with a .sh extension and running them using the command bash scriptname.sh. Make sure to give execute permissions using chmod +x scriptname.sh before running.
 
 

